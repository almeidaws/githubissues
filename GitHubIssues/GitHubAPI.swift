//
//  GitHubAPI.swift
//  GitHubIssues
//
//  Created by Gustavo Amaral on 19/10/19.
//  Copyright Â© 2019 Gustavo Almeida Amaral. All rights reserved.
//

import Moya

enum GitHubAPI: TargetType {
    
    case allIssues(owner: String, repo: String)
    
    static func createBaseURL() -> URL {
        let urlString = "https://api.github.com"
        guard let url = URL(string: urlString) else { fatalError("The URL '\(urlString)' isn't valid") }
        return url
    }
    
    var baseURL: URL { GitHubAPI.createBaseURL() }
    
    var path: String {
        switch self {
        case let .allIssues(owner, repo):
            return "/repos/\(owner)/\(repo)/issues"
        }
    }
    
    var method: Moya.Method {
        switch self {
        case .allIssues:
            return .get
        }
    }
    
    var task: Task {
        switch self {
        case .allIssues:
            return .requestPlain
        }
    }
    
    var headers: [String : String]? {
        switch self {
        case .allIssues:
            return ["Content-type": "application/json"]
        }
    }
    
    var sampleData: Data {
        switch self {
        case .allIssues(_, _):
            return """
    [{"url":"https://api.github.com/repos/apple/swift/issues/27797","repository_url":"https://api.github.com/repos/apple/swift","labels_url":"https://api.github.com/repos/apple/swift/issues/27797/labels{/name}","comments_url":"https://api.github.com/repos/apple/swift/issues/27797/comments","events_url":"https://api.github.com/repos/apple/swift/issues/27797/events","html_url":"https://github.com/apple/swift/pull/27797","id":509518469,"node_id":"MDExOlB1bGxSZXF1ZXN0MzMwMDY0NDUx","number":27797,"title":"Improve warning for inferring an undesirable type","user":{"login":"jder","id":55957,"node_id":"MDQ6VXNlcjU1OTU3","avatar_url":"https://avatars1.githubusercontent.com/u/55957?v=4","gravatar_id":"","url":"https://api.github.com/users/jder","html_url":"https://github.com/jder","followers_url":"https://api.github.com/users/jder/followers","following_url":"https://api.github.com/users/jder/following{/other_user}","gists_url":"https://api.github.com/users/jder/gists{/gist_id}","starred_url":"https://api.github.com/users/jder/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jder/subscriptions","organizations_url":"https://api.github.com/users/jder/orgs","repos_url":"https://api.github.com/users/jder/repos","events_url":"https://api.github.com/users/jder/events{/privacy}","received_events_url":"https://api.github.com/users/jder/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2019-10-19T22:41:03Z","updated_at":"2019-10-19T23:18:44Z","closed_at":null,"author_association":"CONTRIBUTOR","pull_request":{"url":"https://api.github.com/repos/apple/swift/pulls/27797","html_url":"https://github.com/apple/swift/pull/27797","diff_url":"https://github.com/apple/swift/pull/27797.diff","patch_url":"https://github.com/apple/swift/pull/27797.patch"},"body":"<!-- What's in this pull request? -->\r\nAdds a fixit for the warning about inferring a probably-unexpected type, and adds another case for when inferring a type of `[()]`. It would be easy to also warn for arrays of any of the existing cases but this seemed like overkill and would require some additional messages. \r\n\r\nTaken together, this:\r\n\r\n```swift\r\nlet y = x.map { print($0) }\r\n```\r\n\r\nNow produces:\r\n\r\n```\r\nwarning: variable 'y' inferred to have type '[()]'\r\nadd an explicit type annotation to silence this warning\r\n```\r\nWith a fixit to add `: [()]` after `y`.\r\n\r\n<!-- If this pull request resolves any bugs in the Swift bug tracker, provide a link: -->\r\nResolves [SR-11511](https://bugs.swift.org/browse/SR-11511).\r\n\r\n<!--\r\nBefore merging this pull request, you must run the Swift continuous integration tests.\r\nFor information about triggering CI builds via @swift-ci, see:\r\nhttps://github.com/apple/swift/blob/master/docs/ContinuousIntegration.md#swift-ci\r\n\r\nThank you for your contribution to Swift!\r\n-->\r\n"},{"url":"https://api.github.com/repos/apple/swift/issues/27796","repository_url":"https://api.github.com/repos/apple/swift","labels_url":"https://api.github.com/repos/apple/swift/issues/27796/labels{/name}","comments_url":"https://api.github.com/repos/apple/swift/issues/27796/comments","events_url":"https://api.github.com/repos/apple/swift/issues/27796/events","html_url":"https://github.com/apple/swift/pull/27796","id":509516632,"node_id":"MDExOlB1bGxSZXF1ZXN0MzMwMDYzMTQ2","number":27796,"title":"[AutoDiff] Add loop differentiation negative testcases.","user":{"login":"dan-zheng","id":5590046,"node_id":"MDQ6VXNlcjU1OTAwNDY=","avatar_url":"https://avatars0.githubusercontent.com/u/5590046?v=4","gravatar_id":"","url":"https://api.github.com/users/dan-zheng","html_url":"https://github.com/dan-zheng","followers_url":"https://api.github.com/users/dan-zheng/followers","following_url":"https://api.github.com/users/dan-zheng/following{/other_user}","gists_url":"https://api.github.com/users/dan-zheng/gists{/gist_id}","starred_url":"https://api.github.com/users/dan-zheng/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dan-zheng/subscriptions","organizations_url":"https://api.github.com/users/dan-zheng/orgs","repos_url":"https://api.github.com/users/dan-zheng/repos","events_url":"https://api.github.com/users/dan-zheng/events{/privacy}","received_events_url":"https://api.github.com/users/dan-zheng/received_events","type":"User","site_admin":false},"labels":[{"id":955546636,"node_id":"MDU6TGFiZWw5NTU1NDY2MzY=","url":"https://api.github.com/repos/apple/swift/labels/tensorflow","name":"tensorflow","color":"EF6C00","default":false}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2019-10-19T22:18:54Z","updated_at":"2019-10-19T23:04:13Z","closed_at":null,"author_association":"COLLABORATOR","pull_request":{"url":"https://api.github.com/repos/apple/swift/pulls/27796","html_url":"https://github.com/apple/swift/pull/27796","diff_url":"https://github.com/apple/swift/pull/27796.diff","patch_url":"https://github.com/apple/swift/pull/27796.patch"},"body":"Loop differentiation produces incorrect results when the reduction accumulation\r\nvariable is not initialized with an active parameter, e.g. when using\r\n`var result = 1` instead of `var result = x`.\r\n\r\n```swift\r\nfunc for_loop_nonactive_initial_value(_ x: Float) -> Float {\r\n  var result: Float = 1\r\n  for _ in 0..<2 {\r\n    result = result * x\r\n  }\r\n  return result\r\n}\r\nprint(valueWithGradient(at: 3, in: for_loop_nonactive_initial_value))\r\n//   Actual: (value: 9.0, gradient: 3.0)\r\n// Expected: (value: 9.0, gradient: 6.0)\r\n```\r\n\r\n[TF-933](https://bugs.swift.org/browse/TF-933) tracks this issue. This patch add negative testcases (currently failing).\r\n\r\n---\r\n\r\nWorkarounds are to reformulate using `var result = x` or by using\r\n`Array.differentiableReduce`:\r\n\r\n```swift\r\n// Workaround 1: use `var result = x` instead of `var result = 1`.\r\nfunc for_loop_active_initial_value(_ x: Float) -> Float {\r\n  var result = x\r\n  for _ in 0..<1 {\r\n    result = result * x\r\n  }\r\n  return result\r\n}\r\nprint(valueWithGradient(at: 3, in: for_loop_active_initial_value))\r\n// (value: 9.0, gradient: 6.0)\r\n```\r\n\r\n```swift\r\n// Workaround 2: use `Array.differentiableReduce`.\r\nfunc power(_ x: Double, _ exponent: Int) -> Double {\r\n  // Array allocation isn't efficient, but `Array.differentiableReduce` has correct derivatives.\r\n  let array = Array(repeating: x, count: exponent)\r\n  return array.differentiableReduce(1, *)\r\n}\r\nprint(valueWithGradient(at: 3, in: { x in power(x, 2) }))\r\n// (value: 9.0, gradient: 6.0)\r\n```"},{"url":"https://api.github.com/repos/apple/swift/issues/27795","repository_url":"https://api.github.com/repos/apple/swift","labels_url":"https://api.github.com/repos/apple/swift/issues/27795/labels{/name}","comments_url":"https://api.github.com/repos/apple/swift/issues/27795/comments","events_url":"https://api.github.com/repos/apple/swift/issues/27795/events","html_url":"https://github.com/apple/swift/pull/27795","id":509511099,"node_id":"MDExOlB1bGxSZXF1ZXN0MzMwMDU5MTk1","number":27795,"title":"[Diagnostics] Move macros used in diagnostic definitions to their own header","user":{"login":"owenv","id":1946221,"node_id":"MDQ6VXNlcjE5NDYyMjE=","avatar_url":"https://avatars0.githubusercontent.com/u/1946221?v=4","gravatar_id":"","url":"https://api.github.com/users/owenv","html_url":"https://github.com/owenv","followers_url":"https://api.github.com/users/owenv/followers","following_url":"https://api.github.com/users/owenv/following{/other_user}","gists_url":"https://api.github.com/users/owenv/gists{/gist_id}","starred_url":"https://api.github.com/users/owenv/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/owenv/subscriptions","organizations_url":"https://api.github.com/users/owenv/orgs","repos_url":"https://api.github.com/users/owenv/repos","events_url":"https://api.github.com/users/owenv/events{/privacy}","received_events_url":"https://api.github.com/users/owenv/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2019-10-19T21:19:54Z","updated_at":"2019-10-19T21:20:52Z","closed_at":null,"author_association":"CONTRIBUTOR","pull_request":{"url":"https://api.github.com/repos/apple/swift/pulls/27795","html_url":"https://github.com/apple/swift/pull/27795","diff_url":"https://github.com/apple/swift/pull/27795.diff","patch_url":"https://github.com/apple/swift/pull/27795.patch"},"body":"These were duplicated in 11 different files, and as they've gotten more complex a few inconsistencies have snuck in. Sharing them should make future changes easier and less bug-prone.\r\n"},{"url":"https://api.github.com/repos/apple/swift/issues/27794","repository_url":"https://api.github.com/repos/apple/swift","labels_url":"https://api.github.com/repos/apple/swift/issues/27794/labels{/name}","comments_url":"https://api.github.com/repos/apple/swift/issues/27794/comments","events_url":"https://api.github.com/repos/apple/swift/issues/27794/events","html_url":"https://github.com/apple/swift/pull/27794","id":509504466,"node_id":"MDExOlB1bGxSZXF1ZXN0MzMwMDU0MTMy","number":27794,"title":"[SIL Optimization] Factor out a utility function: isConsumingUse from CopyPropagation.cpp into InstOptUtils.cpp.","user":{"login":"ravikandhadai","id":37849400,"node_id":"MDQ6VXNlcjM3ODQ5NDAw","avatar_url":"https://avatars3.githubusercontent.com/u/37849400?v=4","gravatar_id":"","url":"https://api.github.com/users/ravikandhadai","html_url":"https://github.com/ravikandhadai","followers_url":"https://api.github.com/users/ravikandhadai/followers","following_url":"https://api.github.com/users/ravikandhadai/following{/other_user}","gists_url":"https://api.github.com/users/ravikandhadai/gists{/gist_id}","starred_url":"https://api.github.com/users/ravikandhadai/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ravikandhadai/subscriptions","organizations_url":"https://api.github.com/users/ravikandhadai/orgs","repos_url":"https://api.github.com/users/ravikandhadai/repos","events_url":"https://api.github.com/users/ravikandhadai/events{/privacy}","received_events_url":"https://api.github.com/users/ravikandhadai/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2019-10-19T20:15:46Z","updated_at":"2019-10-19T20:47:25Z","closed_at":null,"author_association":"CONTRIBUTOR","pull_request":{"url":"https://api.github.com/repos/apple/swift/pulls/27794","html_url":"https://github.com/apple/swift/pull/27794","diff_url":"https://github.com/apple/swift/pull/27794.diff","patch_url":"https://github.com/apple/swift/pull/27794.patch"},"body":"The function checks if a given use of a non-trivial, non-address SILValue will consume it\r\ni.e., decrease its reference count.\r\n\r\nThis function will be used by the OSLogOptimization pass while constant folding values. See this PR: https://github.com/apple/swift/pull/27744, function `replaceAllUsesAndFixLifetimes`. "},{"url":"https://api.github.com/repos/apple/swift/issues/27793","repository_url":"https://api.github.com/repos/apple/swift","labels_url":"https://api.github.com/repos/apple/swift/issues/27793/labels{/name}","comments_url":"https://api.github.com/repos/apple/swift/issues/27793/comments","events_url":"https://api.github.com/repos/apple/swift/issues/27793/events","html_url":"https://github.com/apple/swift/pull/27793","id":509489688,"node_id":"MDExOlB1bGxSZXF1ZXN0MzMwMDQzODQ4","number":27793,"title":"Back port foundation tests","user":{"login":"phausler","id":278470,"node_id":"MDQ6VXNlcjI3ODQ3MA==","avatar_url":"https://avatars1.githubusercontent.com/u/278470?v=4","gravatar_id":"","url":"https://api.github.com/users/phausler","html_url":"https://github.com/phausler","followers_url":"https://api.github.com/users/phausler/followers","following_url":"https://api.github.com/users/phausler/following{/other_user}","gists_url":"https://api.github.com/users/phausler/gists{/gist_id}","starred_url":"https://api.github.com/users/phausler/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/phausler/subscriptions","organizations_url":"https://api.github.com/users/phausler/orgs","repos_url":"https://api.github.com/users/phausler/repos","events_url":"https://api.github.com/users/phausler/events{/privacy}","received_events_url":"https://api.github.com/users/phausler/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2019-10-19T18:13:11Z","updated_at":"2019-10-19T18:13:29Z","closed_at":null,"author_association":"MEMBER","pull_request":{"url":"https://api.github.com/repos/apple/swift/pulls/27793","html_url":"https://github.com/apple/swift/pull/27793","diff_url":"https://github.com/apple/swift/pull/27793.diff","patch_url":"https://github.com/apple/swift/pull/27793.patch"},"body":"The test suite for swift's overlay fails to run when being tested pre-macOS10.15/iOS13. This is caused because of a pair of behavioral fixes that were applied expecting the underlying types to adhere to the expected characteristics. That makes testing in those scenarios invalid and report failure. This allows the tests to be adequately run on previous releases."},{"url":"https://api.github.com/repos/apple/swift/issues/27792","repository_url":"https://api.github.com/repos/apple/swift","labels_url":"https://api.github.com/repos/apple/swift/issues/27792/labels{/name}","comments_url":"https://api.github.com/repos/apple/swift/issues/27792/comments","events_url":"https://api.github.com/repos/apple/swift/issues/27792/events","html_url":"https://github.com/apple/swift/pull/27792","id":509484969,"node_id":"MDExOlB1bGxSZXF1ZXN0MzMwMDQwODM1","number":27792,"title":"Popcnt optimization","user":{"login":"zoecarver","id":13806068,"node_id":"MDQ6VXNlcjEzODA2MDY4","avatar_url":"https://avatars1.githubusercontent.com/u/13806068?v=4","gravatar_id":"","url":"https://api.github.com/users/zoecarver","html_url":"https://github.com/zoecarver","followers_url":"https://api.github.com/users/zoecarver/followers","following_url":"https://api.github.com/users/zoecarver/following{/other_user}","gists_url":"https://api.github.com/users/zoecarver/gists{/gist_id}","starred_url":"https://api.github.com/users/zoecarver/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/zoecarver/subscriptions","organizations_url":"https://api.github.com/users/zoecarver/orgs","repos_url":"https://api.github.com/users/zoecarver/repos","events_url":"https://api.github.com/users/zoecarver/events{/privacy}","received_events_url":"https://api.github.com/users/zoecarver/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2019-10-19T17:37:02Z","updated_at":"2019-10-19T17:37:50Z","closed_at":null,"author_association":"CONTRIBUTOR","pull_request":{"url":"https://api.github.com/repos/apple/swift/pulls/27792","html_url":"https://github.com/apple/swift/pull/27792","diff_url":"https://github.com/apple/swift/pull/27792.diff","patch_url":"https://github.com/apple/swift/pull/27792.patch"},"body":"This patch optimizes count-set-bit functions into a call to LLVM's `popcnt` intrinsic. This is not only good for binary size but, also improves performance. \r\n\r\nTo enable the best result, we have to tell llvm the target architecture. If we do this, then (on CPUs that support it) the call to the `popcnt` intrinsic can be optimized to a single `popcnt` instruction. \r\n\r\nHere are some examples (notice, no jumps and no branches):\r\n### Input 1\r\n```swift\r\nfunc test(_ _x: Int) -> Int {\r\n    var x = _x\r\n    var c = Int()\r\n    while x != 0 {\r\n        c += 1;\r\n        x &= (x - 1);\r\n    }\r\n    return c\r\n}\r\n```\r\n\r\n### New output\r\n```\r\n_$s3run4testyS2iF:\r\n\tpushq\t%rbp\r\n\tmovq\t%rsp, %rbp\r\n\tmovq\t%rdi, %rax\r\n\tshrq\t%rax\r\n\tmovabsq\t$6148914691236517205, %rcx\r\n\tandq\t%rax, %rcx\r\n\tsubq\t%rcx, %rdi\r\n\tmovabsq\t$3689348814741910323, %rax\r\n\tmovq\t%rdi, %rcx\r\n\tandq\t%rax, %rcx\r\n\tshrq\t$2, %rdi\r\n\tandq\t%rax, %rdi\r\n\taddq\t%rcx, %rdi\r\n\tmovq\t%rdi, %rax\r\n\tshrq\t$4, %rax\r\n\tleaq\t(%rax,%rdi), %rax\r\n\tmovabsq\t$1085102592571150095, %rcx\r\n\tandq\t%rax, %rcx\r\n\tmovabsq\t$72340172838076673, %rax\r\n\timulq\t%rcx, %rax\r\n\tshrq\t$56, %rax\r\n\tpopq\t%rbp\r\n\tretq\r\n```\r\n\r\n### New output (haswell and later, not tested)\r\n```\r\n_$s3run4testyS2iF:\r\n\tpopcnt  %rax, %rdi\r\n\tretq\r\n```\r\n\r\n### Old output\r\n```\r\n_$s3run4testyS2iF:\r\n\tpushq\t%rbp\r\n\tmovq\t%rsp, %rbp\r\n\ttestq\t%rdi, %rdi\r\n\tje\tLBB1_1\r\n\txorl\t%ecx, %ecx\r\n\t.p2align\t4, 0x90\r\nLBB1_3:\r\n\tmovq\t%rcx, %rax\r\n\tincq\t%rax\r\n\tjo\tLBB1_7\r\n\tmovq\t%rdi, %rdx\r\n\tdecq\t%rdx\r\n\tjo\tLBB1_8\r\n\tincq\t%rcx\r\n\tandq\t%rdx, %rdi\r\n\tjne\tLBB1_3\r\n\tpopq\t%rbp\r\n\tretq\r\nLBB1_1:\r\n\txorl\t%eax, %eax\r\n\tpopq\t%rbp\r\n\tretq\r\nLBB1_7:\r\n\t## InlineAsm Start\r\n\t## InlineAsm End\r\n\tud2\r\nLBB1_8:\r\n\t## InlineAsm Start\r\n\t## InlineAsm End\r\n\tud2\r\n```\r\n\r\n### Input 2\r\n```swift\r\nfunc test(_ _x: Int) -> Int {\r\n    var x = _x\r\n    var c = Int()\r\n    var o = 0\r\n    while x != 0 {\r\n        c += 1;\r\n        o += c;\r\n        x &= (x - 1);\r\n    }\r\n    return c - o\r\n}\r\n```\r\n\r\n### New output\r\n```\r\n_$s3run4testyS2iF:\r\n\tpushq\t%rbp\r\n\tmovq\t%rsp, %rbp\r\n\txorl\t%eax, %eax\r\n\tpopq\t%rbp\r\n\tretq\r\n```\r\n\r\n### Old output\r\n```\r\n_$s3run4testyS2iF:\r\n\tpushq\t%rbp\r\n\tmovq\t%rsp, %rbp\r\n\ttestq\t%rdi, %rdi\r\n\tje\tLBB1_1\r\n\txorl\t%edx, %edx\r\n\txorl\t%ecx, %ecx\r\n\t.p2align\t4, 0x90\r\nLBB1_3:\r\n\tmovq\t%rdx, %rax\r\n\tincq\t%rax\r\n\tjo\tLBB1_9\r\n\taddq\t%rax, %rcx\r\n\tjo\tLBB1_10\r\n\tmovq\t%rdi, %rsi\r\n\tdecq\t%rsi\r\n\tjo\tLBB1_11\r\n\tincq\t%rdx\r\n\tandq\t%rsi, %rdi\r\n\tjne\tLBB1_3\r\n\tsubq\t%rcx, %rax\r\n\tjo\tLBB1_12\r\nLBB1_8:\r\n\tpopq\t%rbp\r\n\tretq\r\nLBB1_1:\r\n\txorl\t%eax, %eax\r\n\txorl\t%ecx, %ecx\r\n\tsubq\t%rcx, %rax\r\n\tjno\tLBB1_8\r\nLBB1_12:\r\n\t## InlineAsm Start\r\n\t## InlineAsm End\r\n\tud2\r\nLBB1_10:\r\n\t## InlineAsm Start\r\n\t## InlineAsm End\r\n\tud2\r\nLBB1_11:\r\n\t## InlineAsm Start\r\n\t## InlineAsm End\r\n\tud2\r\nLBB1_9:\r\n\t## InlineAsm Start\r\n\t## InlineAsm End\r\n\tud2\r\n```\r\n\r\nThis patch is _almost_ ready for @swift-ci to test and benchmark (I'm not sure we'll see a huge improvement, though). I sill need to:\r\n\r\n - [ ] fix the issue with loops\r\n - [ ] tell llvm the architecture (this should probably be its own patch, though)\r\n"},{"url":"https://api.github.com/repos/apple/swift/issues/27791","repository_url":"https://api.github.com/repos/apple/swift","labels_url":"https://api.github.com/repos/apple/swift/issues/27791/labels{/name}","comments_url":"https://api.github.com/repos/apple/swift/issues/27791/comments","events_url":"https://api.github.com/repos/apple/swift/issues/27791/events","html_url":"https://github.com/apple/swift/pull/27791","id":509480490,"node_id":"MDExOlB1bGxSZXF1ZXN0MzMwMDM3OTY5","number":27791,"title":"[update-checkout] Error message if monorepo symlinks cannot be created","user":{"login":"ahoppen","id":4062178,"node_id":"MDQ6VXNlcjQwNjIxNzg=","avatar_url":"https://avatars3.githubusercontent.com/u/4062178?v=4","gravatar_id":"","url":"https://api.github.com/users/ahoppen","html_url":"https://github.com/ahoppen","followers_url":"https://api.github.com/users/ahoppen/followers","following_url":"https://api.github.com/users/ahoppen/following{/other_user}","gists_url":"https://api.github.com/users/ahoppen/gists{/gist_id}","starred_url":"https://api.github.com/users/ahoppen/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ahoppen/subscriptions","organizations_url":"https://api.github.com/users/ahoppen/orgs","repos_url":"https://api.github.com/users/ahoppen/repos","events_url":"https://api.github.com/users/ahoppen/events{/privacy}","received_events_url":"https://api.github.com/users/ahoppen/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2019-10-19T17:02:37Z","updated_at":"2019-10-19T17:51:38Z","closed_at":null,"author_association":"COLLABORATOR","pull_request":{"url":"https://api.github.com/repos/apple/swift/pulls/27791","html_url":"https://github.com/apple/swift/pull/27791","diff_url":"https://github.com/apple/swift/pull/27791.diff","patch_url":"https://github.com/apple/swift/pull/27791.patch"},"body":"If `update-checkout` is trying to create the symlinks to the monorepo but the projects are already checked out, it fails with a pretty ambiguous `OSError: [Errno 17] File exists`. This adds a nicer error message, telling you what happened and what to do: \r\n\r\n```\r\nFile '/Users/alex/swift-src/clang' already exists. Remove it, so update-checkout can create the symlink to the llvm-monorepo.\r\n```"},{"url":"https://api.github.com/repos/apple/swift/issues/27789","repository_url":"https://api.github.com/repos/apple/swift","labels_url":"https://api.github.com/repos/apple/swift/issues/27789/labels{/name}","comments_url":"https://api.github.com/repos/apple/swift/issues/27789/comments","events_url":"https://api.github.com/repos/apple/swift/issues/27789/events","html_url":"https://github.com/apple/swift/pull/27789","id":509367073,"node_id":"MDExOlB1bGxSZXF1ZXN0MzI5OTY2ODA1","number":27789,"title":"[SyntaxParse] Assert that the children of syntax tree nodes have contiguous ranges","user":{"login":"rintaro","id":142081,"node_id":"MDQ6VXNlcjE0MjA4MQ==","avatar_url":"https://avatars1.githubusercontent.com/u/142081?v=4","gravatar_id":"","url":"https://api.github.com/users/rintaro","html_url":"https://github.com/rintaro","followers_url":"https://api.github.com/users/rintaro/followers","following_url":"https://api.github.com/users/rintaro/following{/other_user}","gists_url":"https://api.github.com/users/rintaro/gists{/gist_id}","starred_url":"https://api.github.com/users/rintaro/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rintaro/subscriptions","organizations_url":"https://api.github.com/users/rintaro/orgs","repos_url":"https://api.github.com/users/rintaro/repos","events_url":"https://api.github.com/users/rintaro/events{/privacy}","received_events_url":"https://api.github.com/users/rintaro/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2019-10-19T00:53:08Z","updated_at":"2019-10-19T00:54:44Z","closed_at":null,"author_association":"MEMBER","pull_request":{"url":"https://api.github.com/repos/apple/swift/pulls/27789","html_url":"https://github.com/apple/swift/pull/27789","diff_url":"https://github.com/apple/swift/pull/27789.diff","patch_url":"https://github.com/apple/swift/pull/27789.patch"},"body":"Re-apply #27406 by @nathawes \r\nAlso apply the assertion to node creations from `SyntaxParsingContext::createSyntaxAs()` API.\r\n\r\n(Disabled syntax tree creation for `syntax-ide-test -code-completion` because code completion skips some portion of the source text)"},{"url":"https://api.github.com/repos/apple/swift/issues/27785","repository_url":"https://api.github.com/repos/apple/swift","labels_url":"https://api.github.com/repos/apple/swift/issues/27785/labels{/name}","comments_url":"https://api.github.com/repos/apple/swift/issues/27785/comments","events_url":"https://api.github.com/repos/apple/swift/issues/27785/events","html_url":"https://github.com/apple/swift/pull/27785","id":509357365,"node_id":"MDExOlB1bGxSZXF1ZXN0MzI5OTU5ODgw","number":27785,"title":"[windows] Provide a symlink alternative for Windows.","user":{"login":"drodriguez","id":6338,"node_id":"MDQ6VXNlcjYzMzg=","avatar_url":"https://avatars0.githubusercontent.com/u/6338?v=4","gravatar_id":"","url":"https://api.github.com/users/drodriguez","html_url":"https://github.com/drodriguez","followers_url":"https://api.github.com/users/drodriguez/followers","following_url":"https://api.github.com/users/drodriguez/following{/other_user}","gists_url":"https://api.github.com/users/drodriguez/gists{/gist_id}","starred_url":"https://api.github.com/users/drodriguez/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/drodriguez/subscriptions","organizations_url":"https://api.github.com/users/drodriguez/orgs","repos_url":"https://api.github.com/users/drodriguez/repos","events_url":"https://api.github.com/users/drodriguez/events{/privacy}","received_events_url":"https://api.github.com/users/drodriguez/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2019-10-18T23:52:29Z","updated_at":"2019-10-19T00:28:03Z","closed_at":null,"author_association":"COLLABORATOR","pull_request":{"url":"https://api.github.com/repos/apple/swift/pulls/27785","html_url":"https://github.com/apple/swift/pull/27785","diff_url":"https://github.com/apple/swift/pull/27785.diff","patch_url":"https://github.com/apple/swift/pull/27785.patch"},"body":"Python 2.7 in Windows do not have os.symlink. Provide one by using Win32\r\nAPI, and try to match the behaviour that seems to be implied by the Unix\r\nimplementation (meaning, the destination is removed before the symlink\r\nis created).\r\n\r\nBefore this change, calling update-checkout.cmd in Windows will have failed when os.symlink was used.\r\n\r\nThis is not used by the build script at the moment, but people might use the script in Windows to update their local copies. Sadly creating symlinks in Windows require the user to be Administrators, but that's also a requirement for adapting the Windows SDK to be used modularly, so developers should be already setup."},{"url":"https://api.github.com/repos/apple/swift/issues/27784","repository_url":"https://api.github.com/repos/apple/swift","labels_url":"https://api.github.com/repos/apple/swift/issues/27784/labels{/name}","comments_url":"https://api.github.com/repos/apple/swift/issues/27784/comments","events_url":"https://api.github.com/repos/apple/swift/issues/27784/events","html_url":"https://github.com/apple/swift/pull/27784","id":509356073,"node_id":"MDExOlB1bGxSZXF1ZXN0MzI5OTU4OTQ2","number":27784,"title":"[Serialization] Store whether an override depends on its base for ABI","user":{"login":"jrose-apple","id":15097531,"node_id":"MDQ6VXNlcjE1MDk3NTMx","avatar_url":"https://avatars2.githubusercontent.com/u/15097531?v=4","gravatar_id":"","url":"https://api.github.com/users/jrose-apple","html_url":"https://github.com/jrose-apple","followers_url":"https://api.github.com/users/jrose-apple/followers","following_url":"https://api.github.com/users/jrose-apple/following{/other_user}","gists_url":"https://api.github.com/users/jrose-apple/gists{/gist_id}","starred_url":"https://api.github.com/users/jrose-apple/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jrose-apple/subscriptions","organizations_url":"https://api.github.com/users/jrose-apple/orgs","repos_url":"https://api.github.com/users/jrose-apple/repos","events_url":"https://api.github.com/users/jrose-apple/events{/privacy}","received_events_url":"https://api.github.com/users/jrose-apple/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2019-10-18T23:45:48Z","updated_at":"2019-10-19T00:35:36Z","closed_at":null,"author_association":"MEMBER","pull_request":{"url":"https://api.github.com/repos/apple/swift/pulls/27784","html_url":"https://github.com/apple/swift/pull/27784","diff_url":"https://github.com/apple/swift/pull/27784.diff","patch_url":"https://github.com/apple/swift/pull/27784.patch"},"body":"In some circumstances, a Swift declaration in module A will depend on another declaration (usually from Objective-C) that can't be loaded, for whatever reason. If the Swift declaration is *overriding* the missing declaration, this can present a problem, because the way methods are dispatched in Swift can depend on knowing the original class was that introduced the method. However, if the compiler can prove that the override can still be safely invoked/used in all cases, it doesn't need to worry about the overridden declaration being missing.\r\n\r\nThis is especially relevant for property accessors, because there's currently no logic to recover from a property being successfully deserialized and then finding out that an accessor couldn't be.\r\n\r\nThe decision of whether or not an override can be safely invoked without knowledge of the base method is something to be cautious aboutâa mistaken analysis would effectively be a miscompile. So up until now, this was limited to one case: when a method is known to be `@objc dynamic`, i.e. always dispatched through objc_msgSend. (Even this may become questionable if we have first-class method references, like we do for key paths.) This worked particularly well because the compiler infers `dynamic` for any overload of an imported Objective-C method or accessor, in case it imports differently in a different -swift-version and a client ends up subclassing it.\r\n\r\nHowever...that inference does not apply if the class is final, because then there are no subclasses to worry about.\r\n\r\nThis commit changes the test to be more careful: if the *missing* declaration was `@objc dynamic`, we know that it can't affect ABI, because either the override is properly `@objc dynamic` as well, or the override has introduced its own calling ABI (in practice, a direct call for final methods) that doesn't depend on the superclass. Again, this isn't 100% correct in the presence of first-class methods, but it does fix the issue in practice where a property accessor in a parent class goes missing. And since Objective-C allows adding property setters separately from the original property declaration, that's something that can happen even under normal circumstances. Sadly.\r\n\r\nThis approach could probably be extended to constructors as well. I'm a little more cautious about throwing vars and subscripts into the mix because of the presence of key paths, which do allow identity-based comparison of overrides and bases.\r\n\r\nrdar://problem/56388950"},{"url":"https://api.github.com/repos/apple/swift/issues/27776","repository_url":"https://api.github.com/repos/apple/swift","labels_url":"https://api.github.com/repos/apple/swift/issues/27776/labels{/name}","comments_url":"https://api.github.com/repos/apple/swift/issues/27776/comments","events_url":"https://api.github.com/repos/apple/swift/issues/27776/events","html_url":"https://github.com/apple/swift/pull/27776","id":509234609,"node_id":"MDExOlB1bGxSZXF1ZXN0MzI5ODY0NTk4","number":27776,"title":"[requires-evolution] Support multiple patterns in catch clauses","user":{"login":"owenv","id":1946221,"node_id":"MDQ6VXNlcjE5NDYyMjE=","avatar_url":"https://avatars0.githubusercontent.com/u/1946221?v=4","gravatar_id":"","url":"https://api.github.com/users/owenv","html_url":"https://github.com/owenv","followers_url":"https://api.github.com/users/owenv/followers","following_url":"https://api.github.com/users/owenv/following{/other_user}","gists_url":"https://api.github.com/users/owenv/gists{/gist_id}","starred_url":"https://api.github.com/users/owenv/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/owenv/subscriptions","organizations_url":"https://api.github.com/users/owenv/orgs","repos_url":"https://api.github.com/users/owenv/repos","events_url":"https://api.github.com/users/owenv/events{/privacy}","received_events_url":"https://api.github.com/users/owenv/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2019-10-18T18:06:56Z","updated_at":"2019-10-18T18:06:56Z","closed_at":null,"author_association":"CONTRIBUTOR","pull_request":{"url":"https://api.github.com/repos/apple/swift/pulls/27776","html_url":"https://github.com/apple/swift/pull/27776","diff_url":"https://github.com/apple/swift/pull/27776.diff","patch_url":"https://github.com/apple/swift/pull/27776.patch"},"body":"e.g. `do { ... } catch MyErr.a(let code), MyErr.b(let code) { ... }`\r\n\r\nThe approach I took here was to get rid of `CatchStmt` entirely and reuse `CaseStmt` in `DoCatchStmt`. If anyone has time to take a look, I'd appreciate feedback on whether this seems like a good approach before I pitch this on the forums. Initially I tried keeping `CatchStmt` around and just modifying it to hold `CaseLabelItems`, but it resulted in a lot of code duplication in Sema and SILGen. This approach is cleaner overall, but there are still some rough edges (in the profiling code, for instance).\r\n\r\nTODO:\r\n- A couple of code completion tests are still failing\r\n- SILGen tests\r\n- See if there are any more opportunities to reduce code duplication between switch and do-catch statements\r\n- I may implement `#if` support for catch clausesl as part of the eventual proposal, but that'll probably be a separate patch."},{"url":"https://api.github.com/repos/apple/swift/issues/27762","repository_url":"https://api.github.com/repos/apple/swift","labels_url":"https://api.github.com/repos/apple/swift/issues/27762/labels{/name}","comments_url":"https://api.github.com/repos/apple/swift/issues/27762/comments","events_url":"https://api.github.com/repos/apple/swift/issues/27762/events","html_url":"https://github.com/apple/swift/pull/27762","id":508737971,"node_id":"MDExOlB1bGxSZXF1ZXN0MzI5NDc2NjA1","number":27762,"title":"build: allow unified builds on Windows","user":{"login":"compnerd","id":63311,"node_id":"MDQ6VXNlcjYzMzEx","avatar_url":"https://avatars3.githubusercontent.com/u/63311?v=4","gravatar_id":"","url":"https://api.github.com/users/compnerd","html_url":"https://github.com/compnerd","followers_url":"https://api.github.com/users/compnerd/followers","following_url":"https://api.github.com/users/compnerd/following{/other_user}","gists_url":"https://api.github.com/users/compnerd/gists{/gist_id}","starred_url":"https://api.github.com/users/compnerd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/compnerd/subscriptions","organizations_url":"https://api.github.com/users/compnerd/orgs","repos_url":"https://api.github.com/users/compnerd/repos","events_url":"https://api.github.com/users/compnerd/events{/privacy}","received_events_url":"https://api.github.com/users/compnerd/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":12,"created_at":"2019-10-17T21:48:31Z","updated_at":"2019-10-18T20:41:05Z","closed_at":null,"author_association":"COLLABORATOR","pull_request":{"url":"https://api.github.com/repos/apple/swift/pulls/27762","html_url":"https://github.com/apple/swift/pull/27762","diff_url":"https://github.com/apple/swift/pull/27762.diff","patch_url":"https://github.com/apple/swift/pull/27762.patch"},"body":"We cannot query the location of the clang target when clang is built in\r\na unified build.  Use a generator expression instead.\r\n\r\n<!-- What's in this pull request? -->\r\nReplace this paragraph with a description of your changes and rationale. Provide links to external references/discussions if appropriate.\r\n\r\n<!-- If this pull request resolves any bugs in the Swift bug tracker, provide a link: -->\r\nResolves [SR-NNNN](https://bugs.swift.org/browse/SR-NNNN).\r\n\r\n<!--\r\nBefore merging this pull request, you must run the Swift continuous integration tests.\r\nFor information about triggering CI builds via @swift-ci, see:\r\nhttps://github.com/apple/swift/blob/master/docs/ContinuousIntegration.md#swift-ci\r\n\r\nThank you for your contribution to Swift!\r\n-->\r\n"},{"url":"https://api.github.com/repos/apple/swift/issues/27756","repository_url":"https://api.github.com/repos/apple/swift","labels_url":"https://api.github.com/repos/apple/swift/issues/27756/labels{/name}","comments_url":"https://api.github.com/repos/apple/swift/issues/27756/comments","events_url":"https://api.github.com/repos/apple/swift/issues/27756/events","html_url":"https://github.com/apple/swift/pull/27756","id":508592956,"node_id":"MDExOlB1bGxSZXF1ZXN0MzI5MzU2ODAw","number":27756,"title":"[Sema] Requestify default argument type checking","user":{"login":"hamishknight","id":14794099,"node_id":"MDQ6VXNlcjE0Nzk0MDk5","avatar_url":"https://avatars0.githubusercontent.com/u/14794099?v=4","gravatar_id":"","url":"https://api.github.com/users/hamishknight","html_url":"https://github.com/hamishknight","followers_url":"https://api.github.com/users/hamishknight/followers","following_url":"https://api.github.com/users/hamishknight/following{/other_user}","gists_url":"https://api.github.com/users/hamishknight/gists{/gist_id}","starred_url":"https://api.github.com/users/hamishknight/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hamishknight/subscriptions","organizations_url":"https://api.github.com/users/hamishknight/orgs","repos_url":"https://api.github.com/users/hamishknight/repos","events_url":"https://api.github.com/users/hamishknight/events{/privacy}","received_events_url":"https://api.github.com/users/hamishknight/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2019-10-17T16:36:52Z","updated_at":"2019-10-17T18:17:32Z","closed_at":null,"author_association":"COLLABORATOR","pull_request":{"url":"https://api.github.com/repos/apple/swift/pulls/27756","html_url":"https://github.com/apple/swift/pull/27756","diff_url":"https://github.com/apple/swift/pull/27756.diff","patch_url":"https://github.com/apple/swift/pull/27756.patch"},"body":"This PR introduces two new requests, one to compute initializer contexts for default arguments, and another to type-check default arguments within this context.\r\n\r\nThis PR then splits `getDefaultValue` into 3 accessors:\r\n\r\n- `getParsedDefaultExpr` which retrieves the parsed default argument expression.\r\n\r\n- `getTypeCheckedDefaultExpr` which retrieves a fully type-checked default argument expression.\r\n\r\n- `getDefaultExprUnchecked` which returns either a parsed or type-checked default argument depending on whether the latter has been computed.\r\n\r\nAnd also adds `hasDefaultExpr`, which allows checking for the presence of a default expr without kicking off a request.\r\n\r\nOn its own, this isn't enough to resolve [SR-11085](https://bugs.swift.org/browse/SR-11085), I'm going to tackle that in a follow-up to keep the size of this PR down."},{"url":"https://api.github.com/repos/apple/swift/issues/27754","repository_url":"https://api.github.com/repos/apple/swift","labels_url":"https://api.github.com/repos/apple/swift/issues/27754/labels{/name}","comments_url":"https://api.github.com/repos/apple/swift/issues/27754/comments","events_url":"https://api.github.com/repos/apple/swift/issues/27754/events","html_url":"https://github.com/apple/swift/pull/27754","id":508387955,"node_id":"MDExOlB1bGxSZXF1ZXN0MzI5MTg4NTgx","number":27754,"title":"[AutoDiff] Mark SILGen derivative function thunks as \"always inline\".","user":{"login":"dan-zheng","id":5590046,"node_id":"MDQ6VXNlcjU1OTAwNDY=","avatar_url":"https://avatars0.githubusercontent.com/u/5590046?v=4","gravatar_id":"","url":"https://api.github.com/users/dan-zheng","html_url":"https://github.com/dan-zheng","followers_url":"https://api.github.com/users/dan-zheng/followers","following_url":"https://api.github.com/users/dan-zheng/following{/other_user}","gists_url":"https://api.github.com/users/dan-zheng/gists{/gist_id}","starred_url":"https://api.github.com/users/dan-zheng/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dan-zheng/subscriptions","organizations_url":"https://api.github.com/users/dan-zheng/orgs","repos_url":"https://api.github.com/users/dan-zheng/repos","events_url":"https://api.github.com/users/dan-zheng/events{/privacy}","received_events_url":"https://api.github.com/users/dan-zheng/received_events","type":"User","site_admin":false},"labels":[{"id":955546636,"node_id":"MDU6TGFiZWw5NTU1NDY2MzY=","url":"https://api.github.com/repos/apple/swift/labels/tensorflow","name":"tensorflow","color":"EF6C00","default":false}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2019-10-17T10:38:51Z","updated_at":"2019-10-17T21:09:11Z","closed_at":null,"author_association":"COLLABORATOR","pull_request":{"url":"https://api.github.com/repos/apple/swift/pulls/27754","html_url":"https://github.com/apple/swift/pull/27754","diff_url":"https://github.com/apple/swift/pull/27754.diff","patch_url":"https://github.com/apple/swift/pull/27754.patch"},"body":"SILGen derivative function thunks must be publicly exposed and cannot be\r\n`[transparent]`. Instead, mark them as \"always inline\" for optimization.\r\n\r\nResolves [TF-925](https://bugs.swift.org/browse/TF-925).\r\n\r\n---\r\n\r\nDepends on https://github.com/apple/swift/pull/27752; rebase after it is merged."},{"url":"https://api.github.com/repos/apple/swift/issues/27749","repository_url":"https://api.github.com/repos/apple/swift","labels_url":"https://api.github.com/repos/apple/swift/issues/27749/labels{/name}","comments_url":"https://api.github.com/repos/apple/swift/issues/27749/comments","events_url":"https://api.github.com/repos/apple/swift/issues/27749/events","html_url":"https://github.com/apple/swift/pull/27749","id":508197060,"node_id":"MDExOlB1bGxSZXF1ZXN0MzI5MDM3NDM1","number":27749,"title":"[docs] CToSwift: document omit-needless-words","user":{"login":"jrose-apple","id":15097531,"node_id":"MDQ6VXNlcjE1MDk3NTMx","avatar_url":"https://avatars2.githubusercontent.com/u/15097531?v=4","gravatar_id":"","url":"https://api.github.com/users/jrose-apple","html_url":"https://github.com/jrose-apple","followers_url":"https://api.github.com/users/jrose-apple/followers","following_url":"https://api.github.com/users/jrose-apple/following{/other_user}","gists_url":"https://api.github.com/users/jrose-apple/gists{/gist_id}","starred_url":"https://api.github.com/users/jrose-apple/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jrose-apple/subscriptions","organizations_url":"https://api.github.com/users/jrose-apple/orgs","repos_url":"https://api.github.com/users/jrose-apple/repos","events_url":"https://api.github.com/users/jrose-apple/events{/privacy}","received_events_url":"https://api.github.com/users/jrose-apple/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2019-10-17T02:37:27Z","updated_at":"2019-10-17T02:38:07Z","closed_at":null,"author_association":"MEMBER","pull_request":{"url":"https://api.github.com/repos/apple/swift/pulls/27749","html_url":"https://github.com/apple/swift/pull/27749","diff_url":"https://github.com/apple/swift/pull/27749.diff","patch_url":"https://github.com/apple/swift/pull/27749.patch"},"body":"...and update the dirty lie that property names aren't transformed.\r\n\r\nThe only thing left to do is methods!"},{"url":"https://api.github.com/repos/apple/swift/issues/27744","repository_url":"https://api.github.com/repos/apple/swift","labels_url":"https://api.github.com/repos/apple/swift/issues/27744/labels{/name}","comments_url":"https://api.github.com/repos/apple/swift/issues/27744/comments","events_url":"https://api.github.com/repos/apple/swift/issues/27744/events","html_url":"https://github.com/apple/swift/pull/27744","id":508174363,"node_id":"MDExOlB1bGxSZXF1ZXN0MzI5MDE5OTg5","number":27744,"title":"[SIL Opt][OSLogOptimization] Add -enable-ownership-stripping-after-serialization flag","user":{"login":"ravikandhadai","id":37849400,"node_id":"MDQ6VXNlcjM3ODQ5NDAw","avatar_url":"https://avatars3.githubusercontent.com/u/37849400?v=4","gravatar_id":"","url":"https://api.github.com/users/ravikandhadai","html_url":"https://github.com/ravikandhadai","followers_url":"https://api.github.com/users/ravikandhadai/followers","following_url":"https://api.github.com/users/ravikandhadai/following{/other_user}","gists_url":"https://api.github.com/users/ravikandhadai/gists{/gist_id}","starred_url":"https://api.github.com/users/ravikandhadai/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ravikandhadai/subscriptions","organizations_url":"https://api.github.com/users/ravikandhadai/orgs","repos_url":"https://api.github.com/users/ravikandhadai/repos","events_url":"https://api.github.com/users/ravikandhadai/events{/privacy}","received_events_url":"https://api.github.com/users/ravikandhadai/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":7,"created_at":"2019-10-17T01:01:56Z","updated_at":"2019-10-19T20:31:44Z","closed_at":null,"author_association":"CONTRIBUTOR","pull_request":{"url":"https://api.github.com/repos/apple/swift/pulls/27744","html_url":"https://github.com/apple/swift/pull/27744","diff_url":"https://github.com/apple/swift/pull/27744.diff","patch_url":"https://github.com/apple/swift/pull/27744.patch"},"body":"to OSLogPrototypeCompileTest and fix couple of bugs in the OSLogOptimization\r\npass that manifests on ownership SIL.\r\n\r\nAlso, update the constant folding of `Builtin.globalStringTablePointer` so that it can look through ownership instructions."},{"url":"https://api.github.com/repos/apple/swift/issues/27732","repository_url":"https://api.github.com/repos/apple/swift","labels_url":"https://api.github.com/repos/apple/swift/issues/27732/labels{/name}","comments_url":"https://api.github.com/repos/apple/swift/issues/27732/comments","events_url":"https://api.github.com/repos/apple/swift/issues/27732/events","html_url":"https://github.com/apple/swift/pull/27732","id":508104101,"node_id":"MDExOlB1bGxSZXF1ZXN0MzI4OTYyNDM1","number":27732,"title":"SR-6717 Builtin types are always be printed with Builtin prefix","user":{"login":"JGiola","id":6539031,"node_id":"MDQ6VXNlcjY1MzkwMzE=","avatar_url":"https://avatars0.githubusercontent.com/u/6539031?v=4","gravatar_id":"","url":"https://api.github.com/users/JGiola","html_url":"https://github.com/JGiola","followers_url":"https://api.github.com/users/JGiola/followers","following_url":"https://api.github.com/users/JGiola/following{/other_user}","gists_url":"https://api.github.com/users/JGiola/gists{/gist_id}","starred_url":"https://api.github.com/users/JGiola/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/JGiola/subscriptions","organizations_url":"https://api.github.com/users/JGiola/orgs","repos_url":"https://api.github.com/users/JGiola/repos","events_url":"https://api.github.com/users/JGiola/events{/privacy}","received_events_url":"https://api.github.com/users/JGiola/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":{"login":"jrose-apple","id":15097531,"node_id":"MDQ6VXNlcjE1MDk3NTMx","avatar_url":"https://avatars2.githubusercontent.com/u/15097531?v=4","gravatar_id":"","url":"https://api.github.com/users/jrose-apple","html_url":"https://github.com/jrose-apple","followers_url":"https://api.github.com/users/jrose-apple/followers","following_url":"https://api.github.com/users/jrose-apple/following{/other_user}","gists_url":"https://api.github.com/users/jrose-apple/gists{/gist_id}","starred_url":"https://api.github.com/users/jrose-apple/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jrose-apple/subscriptions","organizations_url":"https://api.github.com/users/jrose-apple/orgs","repos_url":"https://api.github.com/users/jrose-apple/repos","events_url":"https://api.github.com/users/jrose-apple/events{/privacy}","received_events_url":"https://api.github.com/users/jrose-apple/received_events","type":"User","site_admin":false},"assignees":[{"login":"jrose-apple","id":15097531,"node_id":"MDQ6VXNlcjE1MDk3NTMx","avatar_url":"https://avatars2.githubusercontent.com/u/15097531?v=4","gravatar_id":"","url":"https://api.github.com/users/jrose-apple","html_url":"https://github.com/jrose-apple","followers_url":"https://api.github.com/users/jrose-apple/followers","following_url":"https://api.github.com/users/jrose-apple/following{/other_user}","gists_url":"https://api.github.com/users/jrose-apple/gists{/gist_id}","starred_url":"https://api.github.com/users/jrose-apple/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jrose-apple/subscriptions","organizations_url":"https://api.github.com/users/jrose-apple/orgs","repos_url":"https://api.github.com/users/jrose-apple/repos","events_url":"https://api.github.com/users/jrose-apple/events{/privacy}","received_events_url":"https://api.github.com/users/jrose-apple/received_events","type":"User","site_admin":false}],"milestone":null,"comments":19,"created_at":"2019-10-16T21:16:32Z","updated_at":"2019-10-19T12:28:36Z","closed_at":null,"author_association":"CONTRIBUTOR","pull_request":{"url":"https://api.github.com/repos/apple/swift/pulls/27732","html_url":"https://github.com/apple/swift/pull/27732","diff_url":"https://github.com/apple/swift/pull/27732.diff","patch_url":"https://github.com/apple/swift/pull/27732.patch"},"body":"ASTPrinter now ignore the Options.FullyQualifiedTypesIfAmbiguous value if the containing module is the builtin one.\r\n\r\nAs stated in the bug report, I've implemented the test in the description to validate the fix but if someone has a more self-contained example I will swap it in no time.\r\n\r\n<!-- If this pull request resolves any bugs in the Swift bug tracker, provide a link: -->\r\nResolves [SR-6717](https://bugs.swift.org/browse/SR-6717)."},{"url":"https://api.github.com/repos/apple/swift/issues/27726","repository_url":"https://api.github.com/repos/apple/swift","labels_url":"https://api.github.com/repos/apple/swift/issues/27726/labels{/name}","comments_url":"https://api.github.com/repos/apple/swift/issues/27726/comments","events_url":"https://api.github.com/repos/apple/swift/issues/27726/events","html_url":"https://github.com/apple/swift/pull/27726","id":508021076,"node_id":"MDExOlB1bGxSZXF1ZXN0MzI4ODk1NjUz","number":27726,"title":"TF-917: fix irgen for witness method partial_apply","user":{"login":"marcrasi","id":5945760,"node_id":"MDQ6VXNlcjU5NDU3NjA=","avatar_url":"https://avatars0.githubusercontent.com/u/5945760?v=4","gravatar_id":"","url":"https://api.github.com/users/marcrasi","html_url":"https://github.com/marcrasi","followers_url":"https://api.github.com/users/marcrasi/followers","following_url":"https://api.github.com/users/marcrasi/following{/other_user}","gists_url":"https://api.github.com/users/marcrasi/gists{/gist_id}","starred_url":"https://api.github.com/users/marcrasi/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/marcrasi/subscriptions","organizations_url":"https://api.github.com/users/marcrasi/orgs","repos_url":"https://api.github.com/users/marcrasi/repos","events_url":"https://api.github.com/users/marcrasi/events{/privacy}","received_events_url":"https://api.github.com/users/marcrasi/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2019-10-16T18:26:23Z","updated_at":"2019-10-16T23:37:14Z","closed_at":null,"author_association":"COLLABORATOR","pull_request":{"url":"https://api.github.com/repos/apple/swift/pulls/27726","html_url":"https://github.com/apple/swift/pull/27726","diff_url":"https://github.com/apple/swift/pull/27726.diff","patch_url":"https://github.com/apple/swift/pull/27726.patch"},"body":"IRGen emits invalid IR for certain `partial_apply` instructions, and this PR fixes this. As far as I can tell, this is a latent issue in upstream Swift, but I can't think of any non-AD test case that would trigger this.\r\n\r\nExplanation:\r\n\r\nThe `func tf_917` in the test case has the following SIL in its VJP:\r\n```\r\n  %6 = witness_method $Ï_0_0, #TF_917.r!1 : <Self where Self : TF_917><A> (Self) -> (A) -> Float : $@convention(witness_method: TF_917) <Ï_0_0 where Ï_0_0 : TF_917><Ï_1_0> (@in_guaranteed Ï_1_0, @in_guaranteed Ï_0_0) -> Float // user: %7\r\n  %7 = partial_apply [callee_guaranteed] %6<Ï_0_0, Double>() : $@convention(witness_method: TF_917) <Ï_0_0 where Ï_0_0 : TF_917><Ï_1_0> (@in_guaranteed Ï_1_0, @in_guaranteed Ï_0_0) -> Float // user: %12\r\n```\r\n\r\nThe `partial_apply` applies the witness method to generic arguments but does not apply it to any values.\r\n\r\nSo IRGen tries to create a forwarder that takes all the value arguments and forwards them to the witness method.\r\n\r\nThe IR signature for the witness method is `(opaque ptr to b, metatype of B, opaque ptr to self, metatype of Self, witness table for Self: TF_917)`. The fact that the self stuff goes at the end is special for witness methods. A normal function would have all the opaque ptrs first, followed by the metatypes.\r\n\r\nHowever, IRGen did not have logic for handling this special case while forwarding forwarder args, so it tried to call the witness method incorrectly with `(opaque ptr to b, opaque ptr to self, metatype of B, metatype of Self, witness table for Self: TF_917)`.\r\n\r\nThis PR adds handling for this special case."},{"url":"https://api.github.com/repos/apple/swift/issues/27713","repository_url":"https://api.github.com/repos/apple/swift","labels_url":"https://api.github.com/repos/apple/swift/issues/27713/labels{/name}","comments_url":"https://api.github.com/repos/apple/swift/issues/27713/comments","events_url":"https://api.github.com/repos/apple/swift/issues/27713/events","html_url":"https://github.com/apple/swift/pull/27713","id":507549887,"node_id":"MDExOlB1bGxSZXF1ZXN0MzI4NTIwNTI0","number":27713,"title":"WIP function builders generalization","user":{"login":"DougGregor","id":989428,"node_id":"MDQ6VXNlcjk4OTQyOA==","avatar_url":"https://avatars3.githubusercontent.com/u/989428?v=4","gravatar_id":"","url":"https://api.github.com/users/DougGregor","html_url":"https://github.com/DougGregor","followers_url":"https://api.github.com/users/DougGregor/followers","following_url":"https://api.github.com/users/DougGregor/following{/other_user}","gists_url":"https://api.github.com/users/DougGregor/gists{/gist_id}","starred_url":"https://api.github.com/users/DougGregor/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/DougGregor/subscriptions","organizations_url":"https://api.github.com/users/DougGregor/orgs","repos_url":"https://api.github.com/users/DougGregor/repos","events_url":"https://api.github.com/users/DougGregor/events{/privacy}","received_events_url":"https://api.github.com/users/DougGregor/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2019-10-16T00:36:10Z","updated_at":"2019-10-16T00:36:10Z","closed_at":null,"author_association":"MEMBER","pull_request":{"url":"https://api.github.com/repos/apple/swift/pulls/27713","html_url":"https://github.com/apple/swift/pull/27713","diff_url":"https://github.com/apple/swift/pull/27713.diff","patch_url":"https://github.com/apple/swift/pull/27713.patch"},"body":"Start reworking how function builders are handled in the type checker"},{"url":"https://api.github.com/repos/apple/swift/issues/27709","repository_url":"https://api.github.com/repos/apple/swift","labels_url":"https://api.github.com/repos/apple/swift/issues/27709/labels{/name}","comments_url":"https://api.github.com/repos/apple/swift/issues/27709/comments","events_url":"https://api.github.com/repos/apple/swift/issues/27709/events","html_url":"https://github.com/apple/swift/pull/27709","id":507535794,"node_id":"MDExOlB1bGxSZXF1ZXN0MzI4NTA5MDQ2","number":27709,"title":"Optimize accessing Swift arrays via ObjC","user":{"login":"Catfish-Man","id":15508554,"node_id":"MDQ6VXNlcjE1NTA4NTU0","avatar_url":"https://avatars0.githubusercontent.com/u/15508554?v=4","gravatar_id":"","url":"https://api.github.com/users/Catfish-Man","html_url":"https://github.com/Catfish-Man","followers_url":"https://api.github.com/users/Catfish-Man/followers","following_url":"https://api.github.com/users/Catfish-Man/following{/other_user}","gists_url":"https://api.github.com/users/Catfish-Man/gists{/gist_id}","starred_url":"https://api.github.com/users/Catfish-Man/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Catfish-Man/subscriptions","organizations_url":"https://api.github.com/users/Catfish-Man/orgs","repos_url":"https://api.github.com/users/Catfish-Man/repos","events_url":"https://api.github.com/users/Catfish-Man/events{/privacy}","received_events_url":"https://api.github.com/users/Catfish-Man/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":{"login":"Catfish-Man","id":15508554,"node_id":"MDQ6VXNlcjE1NTA4NTU0","avatar_url":"https://avatars0.githubusercontent.com/u/15508554?v=4","gravatar_id":"","url":"https://api.github.com/users/Catfish-Man","html_url":"https://github.com/Catfish-Man","followers_url":"https://api.github.com/users/Catfish-Man/followers","following_url":"https://api.github.com/users/Catfish-Man/following{/other_user}","gists_url":"https://api.github.com/users/Catfish-Man/gists{/gist_id}","starred_url":"https://api.github.com/users/Catfish-Man/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Catfish-Man/subscriptions","organizations_url":"https://api.github.com/users/Catfish-Man/orgs","repos_url":"https://api.github.com/users/Catfish-Man/repos","events_url":"https://api.github.com/users/Catfish-Man/events{/privacy}","received_events_url":"https://api.github.com/users/Catfish-Man/received_events","type":"User","site_admin":false},"assignees":[{"login":"Catfish-Man","id":15508554,"node_id":"MDQ6VXNlcjE1NTA4NTU0","avatar_url":"https://avatars0.githubusercontent.com/u/15508554?v=4","gravatar_id":"","url":"https://api.github.com/users/Catfish-Man","html_url":"https://github.com/Catfish-Man","followers_url":"https://api.github.com/users/Catfish-Man/followers","following_url":"https://api.github.com/users/Catfish-Man/following{/other_user}","gists_url":"https://api.github.com/users/Catfish-Man/gists{/gist_id}","starred_url":"https://api.github.com/users/Catfish-Man/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Catfish-Man/subscriptions","organizations_url":"https://api.github.com/users/Catfish-Man/orgs","repos_url":"https://api.github.com/users/Catfish-Man/repos","events_url":"https://api.github.com/users/Catfish-Man/events{/privacy}","received_events_url":"https://api.github.com/users/Catfish-Man/received_events","type":"User","site_admin":false}],"milestone":null,"comments":4,"created_at":"2019-10-15T23:40:43Z","updated_at":"2019-10-19T03:01:30Z","closed_at":null,"author_association":"MEMBER","pull_request":{"url":"https://api.github.com/repos/apple/swift/pulls/27709","html_url":"https://github.com/apple/swift/pull/27709","diff_url":"https://github.com/apple/swift/pull/27709.diff","patch_url":"https://github.com/apple/swift/pull/27709.patch"},"body":""},{"url":"https://api.github.com/repos/apple/swift/issues/27708","repository_url":"https://api.github.com/repos/apple/swift","labels_url":"https://api.github.com/repos/apple/swift/issues/27708/labels{/name}","comments_url":"https://api.github.com/repos/apple/swift/issues/27708/comments","events_url":"https://api.github.com/repos/apple/swift/issues/27708/events","html_url":"https://github.com/apple/swift/pull/27708","id":507524426,"node_id":"MDExOlB1bGxSZXF1ZXN0MzI4NTAwMDEx","number":27708,"title":"[AutoDiff upstream] parsing for @differentiable function type","user":{"login":"marcrasi","id":5945760,"node_id":"MDQ6VXNlcjU5NDU3NjA=","avatar_url":"https://avatars0.githubusercontent.com/u/5945760?v=4","gravatar_id":"","url":"https://api.github.com/users/marcrasi","html_url":"https://github.com/marcrasi","followers_url":"https://api.github.com/users/marcrasi/followers","following_url":"https://api.github.com/users/marcrasi/following{/other_user}","gists_url":"https://api.github.com/users/marcrasi/gists{/gist_id}","starred_url":"https://api.github.com/users/marcrasi/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/marcrasi/subscriptions","organizations_url":"https://api.github.com/users/marcrasi/orgs","repos_url":"https://api.github.com/users/marcrasi/repos","events_url":"https://api.github.com/users/marcrasi/events{/privacy}","received_events_url":"https://api.github.com/users/marcrasi/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2019-10-15T23:00:44Z","updated_at":"2019-10-15T23:10:57Z","closed_at":null,"author_association":"COLLABORATOR","pull_request":{"url":"https://api.github.com/repos/apple/swift/pulls/27708","html_url":"https://github.com/apple/swift/pull/27708","diff_url":"https://github.com/apple/swift/pull/27708.diff","patch_url":"https://github.com/apple/swift/pull/27708.patch"},"body":"Adds parsing for a type attribute `@differentiable`, which is optionally allowed to have argument `@differentiable(linear)`.\r\n\r\nThe typechecker currently rejects all uses of `@differentiable` with \"error: attribute does not apply to type\". Future work (https://bugs.swift.org/browse/TF-871 https://bugs.swift.org/browse/TF-873) will update the typechecker to allow this attribute in places where it is allowed.\r\n\r\nResolves https://bugs.swift.org/browse/TF-822."},{"url":"https://api.github.com/repos/apple/swift/issues/27706","repository_url":"https://api.github.com/repos/apple/swift","labels_url":"https://api.github.com/repos/apple/swift/issues/27706/labels{/name}","comments_url":"https://api.github.com/repos/apple/swift/issues/27706/comments","events_url":"https://api.github.com/repos/apple/swift/issues/27706/events","html_url":"https://github.com/apple/swift/pull/27706","id":507513471,"node_id":"MDExOlB1bGxSZXF1ZXN0MzI4NDkwOTEy","number":27706,"title":"Try being lazy about class realization","user":{"login":"Catfish-Man","id":15508554,"node_id":"MDQ6VXNlcjE1NTA4NTU0","avatar_url":"https://avatars0.githubusercontent.com/u/15508554?v=4","gravatar_id":"","url":"https://api.github.com/users/Catfish-Man","html_url":"https://github.com/Catfish-Man","followers_url":"https://api.github.com/users/Catfish-Man/followers","following_url":"https://api.github.com/users/Catfish-Man/following{/other_user}","gists_url":"https://api.github.com/users/Catfish-Man/gists{/gist_id}","starred_url":"https://api.github.com/users/Catfish-Man/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Catfish-Man/subscriptions","organizations_url":"https://api.github.com/users/Catfish-Man/orgs","repos_url":"https://api.github.com/users/Catfish-Man/repos","events_url":"https://api.github.com/users/Catfish-Man/events{/privacy}","received_events_url":"https://api.github.com/users/Catfish-Man/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2019-10-15T22:25:18Z","updated_at":"2019-10-15T23:19:26Z","closed_at":null,"author_association":"MEMBER","pull_request":{"url":"https://api.github.com/repos/apple/swift/pulls/27706","html_url":"https://github.com/apple/swift/pull/27706","diff_url":"https://github.com/apple/swift/pull/27706.diff","patch_url":"https://github.com/apple/swift/pull/27706.patch"},"body":""},{"url":"https://api.github.com/repos/apple/swift/issues/27705","repository_url":"https://api.github.com/repos/apple/swift","labels_url":"https://api.github.com/repos/apple/swift/issues/27705/labels{/name}","comments_url":"https://api.github.com/repos/apple/swift/issues/27705/comments","events_url":"https://api.github.com/repos/apple/swift/issues/27705/events","html_url":"https://github.com/apple/swift/pull/27705","id":507506795,"node_id":"MDExOlB1bGxSZXF1ZXN0MzI4NDg1MzI5","number":27705,"title":"[Sema] Implement @_nonEphemeral","user":{"login":"hamishknight","id":14794099,"node_id":"MDQ6VXNlcjE0Nzk0MDk5","avatar_url":"https://avatars0.githubusercontent.com/u/14794099?v=4","gravatar_id":"","url":"https://api.github.com/users/hamishknight","html_url":"https://github.com/hamishknight","followers_url":"https://api.github.com/users/hamishknight/followers","following_url":"https://api.github.com/users/hamishknight/following{/other_user}","gists_url":"https://api.github.com/users/hamishknight/gists{/gist_id}","starred_url":"https://api.github.com/users/hamishknight/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hamishknight/subscriptions","organizations_url":"https://api.github.com/users/hamishknight/orgs","repos_url":"https://api.github.com/users/hamishknight/repos","events_url":"https://api.github.com/users/hamishknight/events{/privacy}","received_events_url":"https://api.github.com/users/hamishknight/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2019-10-15T22:05:15Z","updated_at":"2019-10-16T03:03:36Z","closed_at":null,"author_association":"COLLABORATOR","pull_request":{"url":"https://api.github.com/repos/apple/swift/pulls/27705","html_url":"https://github.com/apple/swift/pull/27705","diff_url":"https://github.com/apple/swift/pull/27705.diff","patch_url":"https://github.com/apple/swift/pull/27705.patch"},"body":"This PR contains a subset of the changes in #27695, specifically just the implementation for the `@_nonEphemeral` attribute and the diagnosis of invalid temporary pointers conversions passed to it.\r\n\r\nThis includes all array-to-pointer and string-to-pointer conversions, and most inout-to-pointer conversions with the exception of:\r\n\r\n- Global and static variables\r\n- Stored properties on such variables that are accessed directly (e.g excluding ones with property observers, ones on classes, protocols, and resilient types in general)\r\n- Force unwraps of any of the above\r\n\r\nIf landed, this will leave #27695 with just the changes required to start producing warnings in user code (by annotating the standard library + inferring the attribute in various places).\r\n\r\n"},{"url":"https://api.github.com/repos/apple/swift/issues/27703","repository_url":"https://api.github.com/repos/apple/swift","labels_url":"https://api.github.com/repos/apple/swift/issues/27703/labels{/name}","comments_url":"https://api.github.com/repos/apple/swift/issues/27703/comments","events_url":"https://api.github.com/repos/apple/swift/issues/27703/events","html_url":"https://github.com/apple/swift/pull/27703","id":507487158,"node_id":"MDExOlB1bGxSZXF1ZXN0MzI4NDY4OTU5","number":27703,"title":"[stdlib] Switch some cold paths to inline-never","user":{"login":"airspeedswift","id":8058277,"node_id":"MDQ6VXNlcjgwNTgyNzc=","avatar_url":"https://avatars1.githubusercontent.com/u/8058277?v=4","gravatar_id":"","url":"https://api.github.com/users/airspeedswift","html_url":"https://github.com/airspeedswift","followers_url":"https://api.github.com/users/airspeedswift/followers","following_url":"https://api.github.com/users/airspeedswift/following{/other_user}","gists_url":"https://api.github.com/users/airspeedswift/gists{/gist_id}","starred_url":"https://api.github.com/users/airspeedswift/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/airspeedswift/subscriptions","organizations_url":"https://api.github.com/users/airspeedswift/orgs","repos_url":"https://api.github.com/users/airspeedswift/repos","events_url":"https://api.github.com/users/airspeedswift/events{/privacy}","received_events_url":"https://api.github.com/users/airspeedswift/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2019-10-15T21:15:40Z","updated_at":"2019-10-15T21:42:37Z","closed_at":null,"author_association":"MEMBER","pull_request":{"url":"https://api.github.com/repos/apple/swift/pulls/27703","html_url":"https://github.com/apple/swift/pull/27703","diff_url":"https://github.com/apple/swift/pull/27703.diff","patch_url":"https://github.com/apple/swift/pull/27703.patch"},"body":"Fetching the non-native implementation or creating a bridged wrapper shouldn't need to be inlinable."},{"url":"https://api.github.com/repos/apple/swift/issues/27699","repository_url":"https://api.github.com/repos/apple/swift","labels_url":"https://api.github.com/repos/apple/swift/issues/27699/labels{/name}","comments_url":"https://api.github.com/repos/apple/swift/issues/27699/comments","events_url":"https://api.github.com/repos/apple/swift/issues/27699/events","html_url":"https://github.com/apple/swift/pull/27699","id":507404545,"node_id":"MDExOlB1bGxSZXF1ZXN0MzI4NDAwOTgw","number":27699,"title":"[benchmark] Add ChaCha20-based performance benchmark","user":{"login":"Lukasa","id":1382556,"node_id":"MDQ6VXNlcjEzODI1NTY=","avatar_url":"https://avatars1.githubusercontent.com/u/1382556?v=4","gravatar_id":"","url":"https://api.github.com/users/Lukasa","html_url":"https://github.com/Lukasa","followers_url":"https://api.github.com/users/Lukasa/followers","following_url":"https://api.github.com/users/Lukasa/following{/other_user}","gists_url":"https://api.github.com/users/Lukasa/gists{/gist_id}","starred_url":"https://api.github.com/users/Lukasa/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Lukasa/subscriptions","organizations_url":"https://api.github.com/users/Lukasa/orgs","repos_url":"https://api.github.com/users/Lukasa/repos","events_url":"https://api.github.com/users/Lukasa/events{/privacy}","received_events_url":"https://api.github.com/users/Lukasa/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":11,"created_at":"2019-10-15T18:17:09Z","updated_at":"2019-10-15T23:54:58Z","closed_at":null,"author_association":"CONTRIBUTOR","pull_request":{"url":"https://api.github.com/repos/apple/swift/pulls/27699","html_url":"https://github.com/apple/swift/pull/27699","diff_url":"https://github.com/apple/swift/pull/27699.diff","patch_url":"https://github.com/apple/swift/pull/27699.patch"},"body":"This patch adds a benchmark to the Swift benchmark suite based on the\r\nChaCha20 encryption algorithm.\r\n\r\nAs Swift evolves it is important that it tackles more and more features\r\nand possible use cases. One of these great use-cases is low-level CPU\r\nintensive code, and cryptographic algorithms are a really important\r\ntest-bed.\r\n\r\nThis benchmark therefore provides a real-world test case for Swift's\r\noptimiser. My ideal outcome here is that Swift should be able to perform\r\nas well at this benchmark as a naive equivalent C implementation."},{"url":"https://api.github.com/repos/apple/swift/issues/27695","repository_url":"https://api.github.com/repos/apple/swift","labels_url":"https://api.github.com/repos/apple/swift/issues/27695/labels{/name}","comments_url":"https://api.github.com/repos/apple/swift/issues/27695/comments","events_url":"https://api.github.com/repos/apple/swift/issues/27695/events","html_url":"https://github.com/apple/swift/pull/27695","id":507381352,"node_id":"MDExOlB1bGxSZXF1ZXN0MzI4MzgyMzU4","number":27695,"title":"[Sema] Diagnose unsound pointer conversions","user":{"login":"hamishknight","id":14794099,"node_id":"MDQ6VXNlcjE0Nzk0MDk5","avatar_url":"https://avatars0.githubusercontent.com/u/14794099?v=4","gravatar_id":"","url":"https://api.github.com/users/hamishknight","html_url":"https://github.com/hamishknight","followers_url":"https://api.github.com/users/hamishknight/followers","following_url":"https://api.github.com/users/hamishknight/following{/other_user}","gists_url":"https://api.github.com/users/hamishknight/gists{/gist_id}","starred_url":"https://api.github.com/users/hamishknight/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hamishknight/subscriptions","organizations_url":"https://api.github.com/users/hamishknight/orgs","repos_url":"https://api.github.com/users/hamishknight/repos","events_url":"https://api.github.com/users/hamishknight/events{/privacy}","received_events_url":"https://api.github.com/users/hamishknight/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":11,"created_at":"2019-10-15T17:26:55Z","updated_at":"2019-10-17T17:19:08Z","closed_at":null,"author_association":"COLLABORATOR","pull_request":{"url":"https://api.github.com/repos/apple/swift/pulls/27695","html_url":"https://github.com/apple/swift/pull/27695","diff_url":"https://github.com/apple/swift/pull/27695.diff","patch_url":"https://github.com/apple/swift/pull/27695.patch"},"body":"*(This is an updated version of https://github.com/apple/swift/pull/20467)*\r\n\r\nIn this PR is the logic to emit a diagnostic for unsound array-to-pointer, string-to-pointer, and inout-to-pointer conversions. This is done through the introduction of an underscored attribute `@_nonEphemeral` that denotes a pointer parameter which cannot accept pointer conversions that are only valid for the duration of the call they're passed to.\r\n\r\nThis includes all array-to-pointer and string-to-pointer conversions, and most inout-to-pointer conversions with the exception of:\r\n\r\n- Global and static variables\r\n- Stored properties on such variables that are accessed directly (e.g excluding ones with property observers, ones on classes, protocols, and resilient types in general)\r\n- Force unwraps of any of the above\r\n\r\nVarious pointer parameters in the stdlib have been marked as `@_nonEphemeral`, primarily pointer parameters for initialisers on pointer types. In addition, this PR infers `@_nonEphemeral` on pointer parameters for memberwise initialisers and enum case constructors.\r\n\r\nBy default, the diagnostic emitted will be warning. I have added a frontend flag to allow upgrading to an error, and hopefully this will allow us to transition to an error by default in a future language version.\r\n\r\n"},{"url":"https://api.github.com/repos/apple/swift/issues/27683","repository_url":"https://api.github.com/repos/apple/swift","labels_url":"https://api.github.com/repos/apple/swift/issues/27683/labels{/name}","comments_url":"https://api.github.com/repos/apple/swift/issues/27683/comments","events_url":"https://api.github.com/repos/apple/swift/issues/27683/events","html_url":"https://github.com/apple/swift/pull/27683","id":506955255,"node_id":"MDExOlB1bGxSZXF1ZXN0MzI4MDM3NDcz","number":27683,"title":"[WIP] Distinguish references to names from declarations of those names by type","user":{"login":"brentdax","id":931226,"node_id":"MDQ6VXNlcjkzMTIyNg==","avatar_url":"https://avatars0.githubusercontent.com/u/931226?v=4","gravatar_id":"","url":"https://api.github.com/users/brentdax","html_url":"https://github.com/brentdax","followers_url":"https://api.github.com/users/brentdax/followers","following_url":"https://api.github.com/users/brentdax/following{/other_user}","gists_url":"https://api.github.com/users/brentdax/gists{/gist_id}","starred_url":"https://api.github.com/users/brentdax/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/brentdax/subscriptions","organizations_url":"https://api.github.com/users/brentdax/orgs","repos_url":"https://api.github.com/users/brentdax/repos","events_url":"https://api.github.com/users/brentdax/events{/privacy}","received_events_url":"https://api.github.com/users/brentdax/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2019-10-15T01:46:06Z","updated_at":"2019-10-15T01:46:06Z","closed_at":null,"author_association":"CONTRIBUTOR","pull_request":{"url":"https://api.github.com/repos/apple/swift/pulls/27683","html_url":"https://github.com/apple/swift/pull/27683","diff_url":"https://github.com/apple/swift/pull/27683.diff","patch_url":"https://github.com/apple/swift/pull/27683.patch"},"body":"This is a refactoring in support of the [module qualification feature](https://forums.swift.org/t/pitch-fully-qualified-name-syntax/28482/86) I've previously pitched on Evolution.\r\n\r\nThe eventual goal for that feature is to allow any place that *uses* a name for a declaration defined elsewhere to qualify it with a module name. That is, all of these should allow modules:\r\n\r\n```swift\r\nprint(SomeModule::x)   // The `x` visible from SomeModule\r\n({ () -> SomeModule::T in ... })(x)   // The `T` from SomeModule\r\nT.SomeModule::init()   // The `T.init()` declared in SomeModule\r\n```\r\n\r\nBut things like this should not:\r\n\r\n```swift\r\nfunc SomeModule::fn() { ... }   // defining a function in a different module???\r\nlet SomeModule::x = 1    // defining a constant in another module???\r\n```\r\n\r\nTo support this distinction, this PR adds a `DeclNameRef` type to the compiler. This type currently just wraps `DeclName`, but in the future it will also be able to store a module name when the user module-qualifies a name. Declarations will continue to store a `DeclName` or `Identifier` for their own names, but name lookup entry pointsâand therefore many other AST nodes like `UnresolvedDeclRefExpr`s and `TypeRepr`sâwill switch over to using `DeclNameRef`. Thus, this PR will establish the pathways through which module qualification information will flow without actually making any functional changes to the compiler. This will reduce the amount of merge conflicts during the feature's design and review.\r\n\r\nWhile this PR is in progress, `DeclNameRef`'s constructors will be implicit but deprecated, and a `DeclNameRef_` function is used whenever we want to explicitly construct a `DeclNameRef`. Before I merge this commit, I will make the `DeclNameRef` constructors explicit, rename all `DeclNameRef_`s to `DeclNameRef`, and delete the `DeclNameRef` function."},{"url":"https://api.github.com/repos/apple/swift/issues/27682","repository_url":"https://api.github.com/repos/apple/swift","labels_url":"https://api.github.com/repos/apple/swift/issues/27682/labels{/name}","comments_url":"https://api.github.com/repos/apple/swift/issues/27682/comments","events_url":"https://api.github.com/repos/apple/swift/issues/27682/events","html_url":"https://github.com/apple/swift/pull/27682","id":506954749,"node_id":"MDExOlB1bGxSZXF1ZXN0MzI4MDM3MTQ5","number":27682,"title":"[ClangImporter] Fix edge cases where custom name matches native name","user":{"login":"ChristopherRogers","id":15035,"node_id":"MDQ6VXNlcjE1MDM1","avatar_url":"https://avatars3.githubusercontent.com/u/15035?v=4","gravatar_id":"","url":"https://api.github.com/users/ChristopherRogers","html_url":"https://github.com/ChristopherRogers","followers_url":"https://api.github.com/users/ChristopherRogers/followers","following_url":"https://api.github.com/users/ChristopherRogers/following{/other_user}","gists_url":"https://api.github.com/users/ChristopherRogers/gists{/gist_id}","starred_url":"https://api.github.com/users/ChristopherRogers/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ChristopherRogers/subscriptions","organizations_url":"https://api.github.com/users/ChristopherRogers/orgs","repos_url":"https://api.github.com/users/ChristopherRogers/repos","events_url":"https://api.github.com/users/ChristopherRogers/events{/privacy}","received_events_url":"https://api.github.com/users/ChristopherRogers/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2019-10-15T01:44:26Z","updated_at":"2019-10-17T21:38:31Z","closed_at":null,"author_association":"CONTRIBUTOR","pull_request":{"url":"https://api.github.com/repos/apple/swift/pulls/27682","html_url":"https://github.com/apple/swift/pull/27682","diff_url":"https://github.com/apple/swift/pull/27682.diff","patch_url":"https://github.com/apple/swift/pull/27682.patch"},"body":"<!-- What's in this pull request? -->\r\nThe code does naive lookup of Swift types using the type name, but sometimes the Swift type we're looking for only has that name in its @objc attribute. This change makes the compiler exclude certain Swift declarations from matching even if the Swift name is the same (namely, not being available in Obj-C or having a mismatched `@objc` name) and continue to find the correct declaration without using lookup by name.\r\n\r\nI'm not quite sure how some cases worked before this, so some modifications may be necessary.\r\n\r\nThe main change is in the first commit. The other commits are some other changes I had sitting around. I don't have any tests for the Obj-C name commit (for the FIXME) and am not quite sure if it helps (tests still pass if I revert those changes), so I can drop that commit.\r\n\r\nOn a personal note, this also removes the need for a workaround Iâve had in my codebase at work to get Swift to associate a forward declaration to its Swift declaration (which involves creating a Clang module of the same name containing the generated Obj-C interface of the problematic class). ð\r\n\r\n<!-- If this pull request resolves any bugs in the Swift bug tracker, provide a link: -->\r\nResolves [SR-4827](https://bugs.swift.org/browse/SR-4827)."},{"url":"https://api.github.com/repos/apple/swift/issues/27680","repository_url":"https://api.github.com/repos/apple/swift","labels_url":"https://api.github.com/repos/apple/swift/issues/27680/labels{/name}","comments_url":"https://api.github.com/repos/apple/swift/issues/27680/comments","events_url":"https://api.github.com/repos/apple/swift/issues/27680/events","html_url":"https://github.com/apple/swift/pull/27680","id":506945384,"node_id":"MDExOlB1bGxSZXF1ZXN0MzI4MDI5OTk0","number":27680,"title":"[stdlib] Outline a few slow-path bridged array methods","user":{"login":"airspeedswift","id":8058277,"node_id":"MDQ6VXNlcjgwNTgyNzc=","avatar_url":"https://avatars1.githubusercontent.com/u/8058277?v=4","gravatar_id":"","url":"https://api.github.com/users/airspeedswift","html_url":"https://github.com/airspeedswift","followers_url":"https://api.github.com/users/airspeedswift/followers","following_url":"https://api.github.com/users/airspeedswift/following{/other_user}","gists_url":"https://api.github.com/users/airspeedswift/gists{/gist_id}","starred_url":"https://api.github.com/users/airspeedswift/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/airspeedswift/subscriptions","organizations_url":"https://api.github.com/users/airspeedswift/orgs","repos_url":"https://api.github.com/users/airspeedswift/repos","events_url":"https://api.github.com/users/airspeedswift/events{/privacy}","received_events_url":"https://api.github.com/users/airspeedswift/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2019-10-15T01:07:30Z","updated_at":"2019-10-15T02:13:12Z","closed_at":null,"author_association":"MEMBER","pull_request":{"url":"https://api.github.com/repos/apple/swift/pulls/27680","html_url":"https://github.com/apple/swift/pull/27680","diff_url":"https://github.com/apple/swift/pull/27680.diff","patch_url":"https://github.com/apple/swift/pull/27680.patch"},"body":"Mostly for benchmark testing at this point"},{"url":"https://api.github.com/repos/apple/swift/issues/27677","repository_url":"https://api.github.com/repos/apple/swift","labels_url":"https://api.github.com/repos/apple/swift/issues/27677/labels{/name}","comments_url":"https://api.github.com/repos/apple/swift/issues/27677/comments","events_url":"https://api.github.com/repos/apple/swift/issues/27677/events","html_url":"https://github.com/apple/swift/pull/27677","id":506937651,"node_id":"MDExOlB1bGxSZXF1ZXN0MzI4MDIzNzI1","number":27677,"title":"Adjust for LLVM changes","user":{"login":"smeenai","id":1123966,"node_id":"MDQ6VXNlcjExMjM5NjY=","avatar_url":"https://avatars2.githubusercontent.com/u/1123966?v=4","gravatar_id":"","url":"https://api.github.com/users/smeenai","html_url":"https://github.com/smeenai","followers_url":"https://api.github.com/users/smeenai/followers","following_url":"https://api.github.com/users/smeenai/following{/other_user}","gists_url":"https://api.github.com/users/smeenai/gists{/gist_id}","starred_url":"https://api.github.com/users/smeenai/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/smeenai/subscriptions","organizations_url":"https://api.github.com/users/smeenai/orgs","repos_url":"https://api.github.com/users/smeenai/repos","events_url":"https://api.github.com/users/smeenai/events{/privacy}","received_events_url":"https://api.github.com/users/smeenai/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":12,"created_at":"2019-10-15T00:34:04Z","updated_at":"2019-10-18T20:39:58Z","closed_at":null,"author_association":"CONTRIBUTOR","pull_request":{"url":"https://api.github.com/repos/apple/swift/pulls/27677","html_url":"https://github.com/apple/swift/pull/27677","diff_url":"https://github.com/apple/swift/pull/27677.diff","patch_url":"https://github.com/apple/swift/pull/27677.patch"},"body":""}]
    """.utf8Encoded()
        }
    }
}


private extension String {
    
    func utf8Encoded() -> Data {
        return data(using: .utf8)!
    }
}
